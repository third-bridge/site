#!/usr/bin/nbb

;; Copyright Â© 2022, JUXT LTD.

(ns site
  {:clj-kondo/config '{:lint-as {promesa.core/let clojure.core/let}}}
  (:require [clojure.edn :as edn]
            [clojure.tools.cli :refer [parse-opts summarize]]
            [clojure.string :as str]
            [nbb.core :refer [slurp]]
            [cljs.pprint :refer [pprint]]
            ["axios$default" :as axios]
            ["zx" :refer [$ chalk]]
            [promesa.core :as p]
            ["console$log" :as log]
            ["fs" :as fs]
            ["os" :as os]
            ["util" :refer [format]]
            ["path" :as path]))

(def ^:dynamic *silent* nil)
(def ^:dynamic *debug* nil)

(defn edn-to-json
  [edn]
  (-> (edn/read-string {:readers {'juxt.site.alpha/as-str pr-str}} edn)
      (clj->js)))

(def env
  (let [js-p (.-env js/process)]
    (into {} (for [k (js-keys js-p)]
               [k (aget js-p k)]))))

(defn message! [& msg]
  (when-not *silent*
    (apply println (apply chalk/green "site:") msg)))

(defn env-get [property]
  (cond
    (string? property) (get env property)
    (keyword? property) (get env (name property))
    :else (do (message! "No property found!"))))

(defn error! [& msg]
  (when-not *silent*
    (apply println (apply chalk/red "fail:") msg)))

(defn error-and-exit! [exit & msg]
  (apply error! msg)
  (js/process.exit exit))

(defn error-and-usage! [msg opts]
  (error! msg)
  (println "Usage:")
  (println (:summary opts))
  (js/process.exit 1))

(def config-file
  (case (os.type)
    ("Linux" "Mac OS X") (str (os.homedir) "/.config/site/config.edn")
    (error-and-exit! 1 "Unsupported OS")))

(defn file-extension
  [path]
  (subs path (inc (str/last-index-of path "."))))

(def config
  (cond-> {}
    (fs/existsSync config-file)
    (merge
     (edn/read-string
      {:readers {'ig/ref identity
                 'ref identity
                 'profile #(get % :prod)
                 'env #(env-get (str %))
                 'join #(apply str %)}}

      ;; You need to call `str` on result as `readFileSync` returns buffer or what
      (str (fs/readFileSync config-file))))

    js/process.env.SITE_BASE_URI  ;; or (get-env "SITE_BASE_URI")
    (assoc :juxt.site.alpha/base-uri js/process.env.SITE_BASE_URI))) ;; or (get-env "SITE_BASE_URI")

(defn load-token []
  (let [token (-> os
                  .homedir
                  (str "/.local/share/site/access-token.json")
                  fs/readFileSync
                  js/JSON.parse
                  (js->clj :keywordize-keys true)
                  :access_token)]
    (if token
      token
      (prn "Please get a new access-token to proceed"))))

(defn show-config
  "Show configuration"
  [opts]
  (pprint config))

(defn put-graphql
  "Put a GraphQL document"
  [opts]
  (let [{access-token "access_token"} (load-token)
        {:keys [base-uri file path]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-usage! "GraphQL schema file required" opts))
    (when-not (.isFile (fs/lstatSync file)) (error-and-exit! 1 "GraphQL schema file must be a file"))
    (when-not path (error-and-usage! "Path required" opts))

    (let [{:keys [status headers body]}
          (axios/put
           (format "%s%s" base-uri path)
           {:headers {"authorization" (format "Bearer %s" access-token)
                      "content-type" "application/graphql"
                      "accept" "text/plain"}
            :body (cond-> (fs/readFileSync file)
                    base-uri (str/replace "{{base-uri}}" base-uri))
            :throw false})]
      (cond
        (#{201 204} status)
        (message! (str "GraphQL document uploaded: "
                       (chalk/blue (.getName file))
                       " -> "
                       (chalk/blue path)))

        :else
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn post-graphql
  "Post a GraphQL schema"
  [opts]
  (let [{access-token "access_token"} (load-token)
        {:keys [base-uri file path]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-usage! "GraphQL schema file required" opts))
    (when-not (.isFile (fs/lstatSync file)) (error-and-exit! 1 "GraphQL schema file must be a file"))
    (when-not path (error-and-usage! "Path required" opts))

    (let [{:keys [status headers body]}
          (axios/post
           (format "%s%s" base-uri path)
           {:headers {"authorization" (format "Bearer %s" access-token)
                      "content-type" "application/json"
                      "accept" "text/plain"}
            :body (clj->js {"query" (cond-> (fs/readFileSync file)
                                      base-uri (str/replace "{{base-uri}}" base-uri))})
            :throw false})]
      (cond
        (= status 200)
        (do
          (message! (format "GraphQL posted"))
          (message! (str/trim body)))

        :else
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn infer-content-type
  [extension]
  (case extension
    ("htm" "html") "text/html;charset=utf-8"
    "js" "text/javascript"
    ("map" "json") "application/json"
    "edn" "application/edn"
    "csv" "text/csv"
    "png" "image/png"
    ("jpg" "jpeg") "image/jpeg"
    "svg" "image/svg+xml"
    "ico" "image/x-icon"
    ("gif" "webp" "bmp") (str "image/" extension)
    "css" "text/css; charset=utf-8"
    "txt" "text/plain"
    ("woff" "woff2" "otf" "ttf") (str "font/" extension)
    ("mp4" "mpeg" "webm") (str "video/" extension)
    ("opus" "wav" "aac") (str "audio/" extension)
    "mp3" "audio/mpeg"
    nil))

(defn content-type [filename]
  (when-let [suffix (file-extension filename)]
    (or
     (infer-content-type suffix)
     (do
       (error! "Failed to determine content-type for"
               filename (format "(suffix=%s)" suffix)
               " Falling back to application/octet-stream")
       "application/octet-stream"))))

(defn post-resources
  "Post one or more resources"
  [opts]
  (let [{access-token "access_token"} (load-token)
        {:keys [base-uri file]
         :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not (fs/existsSync file) (error-and-exit! 1 (str "File not found: " file)))

    (let [{:keys [status headers body]}
          (axios/post
           (str base-uri "/_site/resources/")
           {:headers (cond-> {"authorization" (format "Bearer %s" access-token)
                              "content-type" "application/edn"})
            :body (cond-> (fs/readFileSync file)
                    :always (str/replace "{{base-uri}}" base-uri))
            :throw false})]
      (message! (format "Posting resources from %s" file))
      (case status
        (201 204)
        (message! (format "Resource %s: %s"
                          (case status 201 "created" 204 "updated")
                          (get headers "location")))

        207
        (let [results (edn/read-string body)
              errors (filter #(contains? % :error) results)]
          (dorun
               (map
                (fn [ix r]
                  (cond
                    (< (:status r) 400)
                    (println (chalk/green (format "%d: %s" ix r)))
                    :else
                    (println (chalk/red (format "%d: %s" ix r)))
                (range) results)))
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))))

;; mopts

(defn put-static-site
  "Given a path and a directory containing at least an index.html file, serves the
  files in the directory using the given path as the root"
  [opts]
  ;; (try
    (let [{access-token "access_token"} (load-token)
          _ (prn "other debug")
          _ (prn access-token)
          {:keys [base-uri directory path spa]
           :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
      (message! "putting site" base-uri directory path)
      (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
      (when-not (fs/existsSync (str directory "/index.html"))
        (error-and-exit! 1 (str "No index.html found in directory: " directory)))
      (let [base (path.resolve directory)
            ;; relative-path (fn [file] (str path (str/replace-first (.getPath (.toURI file)) base "")))
            relative-path (fn [file] (str path (-> file path.basename (str/replace-first base ""))))
            _ (prn "STATIC SITE2:")
            put-file
            (fn [file]
              (let [destination (str base-uri "/" (relative-path file))
                    _ (message! (str "Putting file " (path.resolve file) " to path " destination))
                    {:keys [status headers body]}
                    (axios/put
                     destination
                     {:headers (merge
                                {"authorization" (format "Bearer %s" access-token)
                                 "content-type" (content-type (.getName file))}
                                (prn (relative-path file))
                                (when (and (str/includes? (relative-path file) "index.html")
                                           spa)
                                  (prn "adding headers")
                                  {"site-type" "AppRoutes"
                                   "site-pattern" (str base-uri "/" path "/app/.*")}))
                      :body (fs/readFileSync file)
                      :throw false})]
                (case status
                  (201 204)
                  (message! (format "Resource %s: %s"
                                    (case status 201 "created" 204 "updated")
                                    headers))

                  207
                  (let [results (edn/read-string body)
                        errors (filter #(contains? % :error) results)]
                    (if (pos? (count errors))
                      (do
                        (error! "Not all resources were accepted:")
                        (dorun (map (fn [ix r]
                                      (cond
                                        (< (:status r) 400)
                                        (println (chalk/green (format "%d: %s" ix r)))
                                        :else
                                        (println (chalk/red (format "%d: %s" ix r)))))
                                    (range) results)))
                      (message! "Resources all posted OK")))

                  (do
                    (error! "Server response:" status (str/trim body))
                    (message! "Request id:" (get headers "site-request-id"))))))]
        (some->> directory
                 fs/readdirSync
                 (filter #(.isFile (fs/lstatSync %)))
                 (mapv put-file))
        (message! "Site successfully deployed. Visit "
                  (str base-uri "/" (-> directory
                                        (str "/index.html")
                                        relative-path)))))
  ;; (catch js/Error e (str "error putting static site " e)))
  )

(def global-cli-options
  [["-b" "--base-uri BASE-URI" "The Base-URI of the server you are targetting"]
   ["-s" "--silent" "Silent mode"]
   ["-D" "--debug" "Enable debug mode"]
   ["-v" "--verbose" "Verbose mode"]
   ["-h" "--help" "Show this summary"]])

(def commands
  [["put-graphql"
    {:description (:doc (meta #'put-graphql))
     :cli-options [["-f" "--file FILE" "GraphQL schema file"]
                   ["-p" "--path PATH" "The destination path after the base-uri"]]
     :delegate put-graphql}]

   ["post-graphql"
    {:description (:doc (meta #'post-graphql))
     :cli-options [["-f" "--file FILE" "GraphQL request"]
                   ["-p" "--path PATH" "The destination path after the base-uri"]]
     :delegate post-graphql}]

   ["post-resources"
    {:description (:doc (meta #'post-resources))
     :cli-options [["-f" "--file FILE" "Resource file (in EDN format)"]]
     :delegate post-resources}]

   ["put-static-site"
    {:description (:doc (meta #'put-static-site))
     :cli-options [["-d" "--directory DIR" "Directory containing static site files"]
                   ["-p" "--path PATH" "Path the site will be available at. e.g -p mysite will make the site available at BASE_URI/mysite/index.html"]
                   ["-spa" "--spa SPA" "If set the html file will be served at PATH/app/*"]]
     :delegate put-static-site}]])

(let [{:keys [options arguments summary errors]}
      (parse-opts *command-line-args*  global-cli-options :in-order true)


      command (first arguments)

      {:keys [cli-options delegate]}
      ((into {} commands) command)

      print-summary
      (fn []
        (do
          (println (chalk/green.bold "site"))
          (println)
          (println "This is a resource management tool for Site.")
          (println)
          (println (chalk/white "Usage"))
          (println)
          (println "site <global-options> <subcommand> <subcommand-options>")
          (println)
          (println (chalk/white "Global options"))
          (println summary)
          (println)
          (println (chalk/white "Environment variables"))
          (println)
          (println "SITE_BASE_URI \tSet the default Base-URI")
          (println "SITE_PASS_DIR \tOverride where Unix pass passwords are located")
          (println)
          (println (chalk/white "Subcommands"))
          (println)
          (doseq [[command {:keys [description cli-options delegate]}] commands]
            (apply
             println
             (remove nil? [command (chalk/yellow "(" description (when-not delegate " - coming soon!") ")")]))
            (when-let [summary (:summary (parse-opts [] cli-options))]
              (when-not (str/blank? (str/trim summary))
                (println summary)))
            (println))))]

  (cond
    (contains? options :help)
    (print-summary)

    errors
    (doseq [err errors]
      (println err))

    (find (into {} commands) command)
    (binding [*silent* (:silent options)
              *debug* (:debug options)]
      (if delegate
        (let [opts (parse-opts (next arguments) (concat global-cli-options
                                                        cli-options))]
          (when-let [err (some->> opts :errors (str/join ", "))]
            (println (chalk/red "Error: " err)))
          (delegate
           (-> opts
               (update :options merge options))))
        (println "No implementation:" command)))

    (first arguments)
    (println "Unknown command:" (first arguments))

    :else
    (print-summary)))

;; Local Variables:
;; mode: clojurescript
;; End:
